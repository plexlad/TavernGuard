import { Command, type Args, type ChatInputCommand, type MessageCommand, type PieceContext } from '@sapphire/framework';
import type { CacheType, Message } from 'discord.js';
import type { SubcommandMappingArray } from './SubcommandMappings';
export declare class Subcommand<PreParseReturn extends Args = Args, O extends Subcommand.Options = Subcommand.Options> extends Command<PreParseReturn, O> {
    #private;
    parsedSubcommandMappings: SubcommandMappingArray;
    caseInsensitiveSubcommands: boolean;
    constructor(context: PieceContext, options: O);
    onLoad(): void;
    messageRun(message: Message, args: PreParseReturn, context: MessageCommand.RunContext): Promise<void>;
    chatInputRun(interaction: ChatInputCommand.Interaction, context: ChatInputCommand.RunContext): Promise<void>;
}
export interface SubcommandOptions extends Command.Options {
    subcommands?: SubcommandMappingArray;
    /**
     * Whether to add aliases for subcommands with dashes in them
     *
     * When this option is enabled *and* the subcommand implements `messageRun`, dashless aliases will be added.
     *
     * For subcommands groups both the group itself and all subcommands within the group will have dashless aliases added.
     *
     * @since 3.0.0
     * @default false
     */
    generateDashLessAliases?: boolean;
}
export declare namespace Subcommand {
    type Options = SubcommandOptions;
    type JSON = Command.JSON;
    type Context = Command.Context;
    type RunInTypes = Command.RunInTypes;
    type ChatInputInteraction<Cached extends CacheType = CacheType> = Command.ChatInputInteraction<Cached>;
    type ContextMenuInteraction<Cached extends CacheType = CacheType> = Command.ContextMenuInteraction<Cached>;
    type AutocompleteInteraction<Cached extends CacheType = CacheType> = Command.AutocompleteInteraction<Cached>;
    type Registry = Command.Registry;
}
//# sourceMappingURL=Subcommand.d.ts.map